#!/usr/bin/env python3
"""
GLADIATOR Exploit Downloader - Option 3 Hybrid Approach
Downloads exploit code for 1,436 CISA KEV CVEs from multiple sources
"""

import json
import os
import sys
import requests
import time
from pathlib import Path
from datetime import datetime

# Configuration
CISA_KEV_FILE = "/Users/arthurdell/GLADIATOR/datasets/current_threats/cisa_kev_oct2025.json"
OUTPUT_DIR = "/Users/arthurdell/GLADIATOR/datasets/exploit_database/"
LOG_FILE = "/Users/arthurdell/GLADIATOR/logs/exploit_download.log"

# Exploit sources
EXPLOIT_DB_API = "https://www.exploit-db.com/exploits/"
GITHUB_SEARCH = "https://api.github.com/search/repositories"

def log(message):
    """Log to file and stdout"""
    timestamp = datetime.now().isoformat()
    log_msg = f"[{timestamp}] {message}"
    print(log_msg)
    with open(LOG_FILE, 'a') as f:
        f.write(log_msg + '\n')

def load_cisa_kev():
    """Load CISA KEV vulnerabilities"""
    log(f"Loading CISA KEV from {CISA_KEV_FILE}")
    with open(CISA_KEV_FILE) as f:
        data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    log(f"Loaded {len(vulns)} vulnerabilities")
    return vulns

def search_github_exploits(cve_id):
    """Search GitHub for exploit code"""
    try:
        params = {
            'q': f'{cve_id} exploit OR poc',
            'sort': 'stars',
            'order': 'desc'
        }
        response = requests.get(GITHUB_SEARCH, params=params, timeout=10)
        if response.status_code == 200:
            results = response.json().get('items', [])
            if results:
                repo = results[0]
                return {
                    'source': 'github',
                    'url': repo['html_url'],
                    'stars': repo['stargazers_count'],
                    'description': repo.get('description', '')
                }
    except Exception as e:
        log(f"GitHub search failed for {cve_id}: {e}")
    return None

def search_exploit_db(cve_id):
    """Search Exploit-DB"""
    # Exploit-DB requires scraping or API key
    # For now, record CVE for manual/batch download
    return {
        'source': 'exploit_db',
        'cve': cve_id,
        'url': f'https://www.exploit-db.com/search?cve={cve_id}',
        'status': 'pending_download'
    }

def download_exploit(vuln):
    """Download exploit for a vulnerability"""
    cve_id = vuln.get('cveID')
    
    # Check if already downloaded
    output_file = Path(OUTPUT_DIR) / f"{cve_id}.json"
    if output_file.exists():
        log(f"  {cve_id}: Already downloaded, skipping")
        return True
    
    log(f"  {cve_id}: Searching for exploit...")
    
    # Try GitHub first (public, accessible)
    github_exploit = search_github_exploits(cve_id)
    
    # Also note Exploit-DB
    exploit_db_info = search_exploit_db(cve_id)
    
    # Save exploit metadata
    exploit_data = {
        'cve': cve_id,
        'vulnerability_name': vuln.get('vulnerabilityName'),
        'vendor': vuln.get('vendorProject'),
        'product': vuln.get('product'),
        'date_added': vuln.get('dateAdded'),
        'github_exploit': github_exploit,
        'exploit_db': exploit_db_info,
        'downloaded_at': datetime.now().isoformat(),
        'ready_for_variants': github_exploit is not None
    }
    
    # Save to file
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    with open(output_file, 'w') as f:
        json.dump(exploit_data, f, indent=2)
    
    if github_exploit:
        log(f"  {cve_id}: ✓ Found on GitHub ({github_exploit['stars']} stars)")
    else:
        log(f"  {cve_id}: ⚠ Not found on GitHub, logged for Exploit-DB")
    
    return True

def main():
    """Main execution"""
    log("="*80)
    log("GLADIATOR EXPLOIT DOWNLOADER - OPTION 3 HYBRID")
    log("="*80)
    
    # Load CVEs
    vulns = load_cisa_kev()
    total = len(vulns)
    
    log(f"\nTarget: Download exploits for {total} CISA KEV CVEs")
    log(f"Output: {OUTPUT_DIR}")
    log("\nStarting download...\n")
    
    # Download exploits
    successful = 0
    for i, vuln in enumerate(vulns, 1):
        cve_id = vuln.get('cveID')
        log(f"[{i}/{total}] {cve_id}")
        
        if download_exploit(vuln):
            successful += 1
        
        # Rate limit (GitHub API)
        if i % 10 == 0:
            log(f"  Progress: {i}/{total} ({i*100//total}%) - Pausing 2s...")
            time.sleep(2)
    
    log("\n" + "="*80)
    log(f"DOWNLOAD COMPLETE")
    log(f"Total CVEs: {total}")
    log(f"Exploits downloaded: {successful}")
    log(f"Success rate: {successful*100//total}%")
    log("="*80)
    
    return successful

if __name__ == "__main__":
    try:
        count = main()
        sys.exit(0 if count > 0 else 1)
    except KeyboardInterrupt:
        log("\n\nDownload interrupted by user")
        sys.exit(130)
    except Exception as e:
        log(f"\n\nFATAL ERROR: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

